atlas {
  environment {
    cf_port = ${?PORT}
  }

  core {
    model {
      step = 60s
    }

    db {
      class = "com.netflix.atlas.core.db.MemoryDatabase"
      //class = "com.netflix.atlas.core.db.StaticDatabase"

      // How often to rebuild the index for the memory database
      rebuild-frequency = 5s

      // 1h with 60s step
      block-size = 60

      // 6h of data overall
      num-blocks = 6
    }
  }

  webapi {
    tags {
      max-limit = 1000000
    }
    main {
      //port = 7111
      //port = ${?atlas.environment.cf_port}
    }

    graph {
      // Change default start time on graph to smaller range more typical for testing
      start-time = e-30m
    }

    publish {
      // Max age for a datapoint. By default it is one step interval. If the timestamps are
      // normalized locally on the client 2 times the step is likely more appropriate.s
      max-age = 21600000
      // increase default key length
      rules = [
        {
          class = "com.netflix.atlas.core.validation.KeyLengthRule"
          min-length = 2
          max-length = 128
        },
        {
          class = "com.netflix.atlas.core.validation.MaxUserTagsRule"
          limit = 100
        }
      ]
    }

  }

  akka {
    atlascluster = [
      {
        name = "publish"
        class = "com.netflix.atlas.webapi.ClusteredPublishActor"
      },
      {
        name = "db"
        class = "com.netflix.atlas.webapi.ClusteredDatabaseActor"
      }
    ]


    api-endpoints = [
      "com.netflix.atlas.webapi.PublishApi",
      "com.netflix.atlas.webapi.TagsApi",
      "com.netflix.atlas.webapi.RenderApi",
      "com.netflix.atlas.webapi.GraphApi",
      "com.netflix.atlas.akka.HealthcheckApi",
      "com.netflix.atlas.akka.ConfigApi",
      "com.netflix.atlas.akka.StaticPages"
    ]
    port = 8101
  }
}


akka {
  actor {
      provider = "akka.cluster.ClusterActorRefProvider"
      default-dispatcher {
        throughput = 1
      }
      deployment {
        default {
          router = "round-robin-pool"
        }
      }
      default-mailbox {
        mailbox-type = "com.netflix.atlas.akka.UnboundedMeteredMailbox"
        path-pattern = ${atlas.akka.path-pattern}
      }
      cluster-mailbox {
        mailbox-type = "com.netflix.atlas.akka.ClusterMailbox"
        path-pattern = ${atlas.akka.path-pattern}
      }
      //default-mailbox {
      //  mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
      //  mailbox-capacity = 2000
      //  mailbox-push-timeout-time = 5s
      //  path-pattern = ${atlas.akka.path-pattern}
      //  requirements {
      //    "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" = akka.actor.mailbox.bounded-deque-based
      //  }
      //}
      //default-mailbox {
      //  mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
      //  mailbox-capacity = 2000
      //  mailbox-push-timeout-time = 5s
      //  path-pattern = ${atlas.akka.path-pattern}
      //  //requirements {
      //  //  "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" = akka.actor.mailbox.bounded-deque-based
      //  //}
      //}
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2553
    }
  }

  cluster {
    roles = [ "front-end", "back-end" ]
    //seed-nodes = [
    //  "akka.tcp://"${application.name}"@"${clustering.ip}":2551"
    //  "akka.tcp://"${application.name}"@"${clustering.ip}":2552"
    //]
     // "akka.tcp://atlas@127.0.0.1:2551",
    seed-nodes = [
      "akka.tcp://atlas@127.0.0.1:2552"]

    auto-down-unreachable-after = 10s
  }
}

cluster-mailbox {
  mailbox-type = "com.netflix.atlas.akka.ClusterMailbox"
  path-pattern = ${atlas.akka.path-pattern}
}


//akka.persistence.journal.plugin = "akka.persistence.journal.inmem"
akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/journal"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/snapshots"
